#!/usr/bin/env bash
#
# Functions
#
# @author Charlie Revett

# TODO: Automate this or get rid of it as rarely used.
# `asd` outputs all available functions from this file.
asd() {
  if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    echo "Usage: asd"
    return 0
  fi

  echo "> Available bash functions"
  echo "> See: ~/dotfiles/.functions"
  # TODO: improve detail provided in usage
  echo -e "> Use <cmd> -h for usage"

  f=("branch" "gh" "generate-passphrase" "gsync" "tldr" "tre")
  # printf '- %s\n' "${f[@]}"
  printf -- '  - %s\n' "${f[@]}"
}

# `branch` is used within a number of aliases, and returns the branch from the
# current git directory. Taken from oh-my-zsh.
# See: https://gist.github.com/DavidToca/3086571
branch() {
  if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    echo "Usage: branch"
    return 0
  fi

  ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  echo ${ref#refs/heads/}
}

# TODO: Fix so that `.git` is not URL suffix.
# `gh` opens the current repo in a browser.
gh() {
  if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    echo "Usage: gh"
    return 0
  fi

  open `git remote -v | grep fetch | awk '{print $2}' | sed 's/git@/http:\/\//' | sed 's/com:/com\//'`
}

# `generate-passphrase` generates a random passphrase based password.
generate-passphrase() {
  if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    echo "Usage: generate-passphrase <chunks>"
    return 0
  fi

  CHUNKS=4
  if [ "$#" -eq 1 ]; then
    CHUNKS=$1
  fi

  gshuf -n$CHUNKS /usr/share/dict/words | tr -s '\n' '-' | sed 's/.$//' | awk '{print tolower($0)}'
}

# `gsync` is a helper function for moving back to the main branch of a repo and
# updating it with remote.
gsync() {
  if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    echo "Usage: gsync"
    return 0
  fi

  BRANCH="master"

  if [ `git branch --list main` ]; then
    BRANCH="main"
  fi

  git ch $BRANCH
  git fetch
  git pull origin $BRANCH
}

# `tldr` wraps chubin/cheat.sh, and will pipe the resulting sheet in less if it
# it longer than the height of the terminal.
# See: https://github.com/chubin/cheat.sh#usage
tldr() {
  if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    echo "Usage: tldr <lang> <query...>"
    return 0
  fi

  CMD="curl --silent https://cheat.sh/$1"
  QUERY="$(shift 1; IFS="+"; echo "$*")"
  CMD="$CMD/$QUERY"

  echo "$CMD"

  SHEET=$($CMD)
  TERMINAL_LINES=$(tput lines)
  SHEET_LINES=$(echo "$SHEET" | wc -l)

  if [ "$SHEET_LINES" -gt "$TERMINAL_LINES" ]; then
    echo "$SHEET" | less -R
    return 0
  fi

  echo "$SHEET"
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
  if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    echo "Usage: tre <path>"
    return 0
  fi

  tree -aC -I '.git|node_modules|.cache' --dirsfirst "$@" | less -FRNX;
}
